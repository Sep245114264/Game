<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_equipment</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2000</depth>
  <persistent>0</persistent>
  <parentName>Window</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

item_drag = false;
item_drag_x = -1;

// 记录玩家选择的人物
switch( global.choose_index )
{
    case 1: 
        player = spr_xiana_front;
        break;
    case 2:
        player = spr_zhi_front;
        break;
}

// 初始化装备栏
for( i = 0; i &lt; 3; i += 1 )
{
    equip_data[i,ITEM_INDEX] = 0;
    /*equip_data[i,ITEM_DESCRIBE] = "";
    equip_data[i,ITEM_EFFECT] = "";
    equip_data[i,ITEM_ATTRIBUTE] = "";*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( !visiable )
{
    drag = false;
    exit;
}
if( mouse_check_button_pressed(mb_left) &amp;&amp; mouse_in_relion(x, y, x + 238, y + 253) )
{
    if( obj_bag.visiable &amp;&amp; depth &gt; obj_bag.depth &amp;&amp; position_meeting(mouse_x, mouse_y, obj_bag) )
    {
        exit;
    }
    if( obj_mission.visiable &amp;&amp; depth &gt; obj_mission.depth &amp;&amp; position_meeting(mouse_x, mouse_y, obj_mission) )
    {
        exit;
    }
    depth = min(obj_bag.depth, obj_mission.depth) - 1;
    
    if( mouse_in_relion(x+220, y, x+238, y+16) )
    {
        visiable = !visiable;
    }
    
    if( mouse_in_relion(x, y, x + 220, y +20) )
    {
        drag = true;
        xoff = mouse_x - x;
        yoff = mouse_y - y;
    }
}

if( drag )
{
    x = mouse_x - xoff;
    y = mouse_y - yoff;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( !visiable )
{
    exit;
}

if( drag )
{
    x = mouse_x - xoff;
    y = mouse_y - yoff;
    drag = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( !visiable )
{
    exit;
}
draw_sprite(sprite_index, image_index, x, y);

draw_set_font(font_text);
// 窗口拖动
draw_text(x + 10, y + 3, "人物状态");
if( drag )
{
    draw_text(x + 100, y + 3, "(拖动)");
}

// 显示人物属性      
draw_text(x + 172, y + 40, Player.force);
draw_text(x + 172, y + 107, Player.intellect);
draw_text(x + 172, y + 168, Player.income);

// 先遍历装备栏显示物品图标，防止物品信息显示框无法遮住物品图标
for(i = 0; i &lt; 2; i += 1 )
{
    //if( item_drag_x != i  )
    {
        if( equip_data[i, ITEM_INDEX] &amp;&amp; equip_data[i, ITEM_INDEX] != 421)
        {
             draw_sprite( spr_items, obj_bag.item_data[equip_data[i, ITEM_INDEX], ITEM_INDEX], x + 21, y + 28 + 43*i );
        }
        else if( equip_data[i, ITEM_INDEX] == 421 )
        {
            draw_sprite( spr_items, equip_data[i, ITEM_INDEX], x + 21, y + 28 + 43*i );
        }
    }
}

var max_width, text_length, text_height, text_type_length, item_type;
// 遍历装备栏
for( i = 0; i &lt; 2; i += 1 )
{
    if( !obj_bag.drag &amp;&amp; equip_data[i, ITEM_INDEX] != 421)
    {
        if( mouse_in_relion( x+21, y+20+(i*34), x+21+34 , y+43+(i*34)+20 ) )
        {
            if( obj_bag.item_data[equip_data[i, ITEM_INDEX], ITEM_INDEX] )
            {
                max_width = 200;
                index = 0;
                count = separate_attribute(obj_bag.item_data[equip_data[i, ITEM_INDEX],ITEM_EFFECT]);
                item_type = display_item_type(obj_bag.item_data[equip_data[i, ITEM_INDEX], ITEM_TYPE]);
                if( !count )
                {
                    count = 1;
                }
                
                text_length = string_length(obj_bag.item_data[equip_data[i, ITEM_INDEX], ITEM_DESCRIBE]);
                text_height = string_height(obj_bag.item_data[equip_data[i, ITEM_INDEX], ITEM_DESCRIBE]);
                text_type_length = string_length(item_type);
                
                if( x+34+max_width  &gt;= view_xview+640 ) 
                {
                    // 绘制物品信息显示框
                    draw_rectangle_colour(x+34-max_width, y+43+(i*34)+34, x+34, y+43+(i*34)+34+100+text_height*count, c_white, c_white, c_gray, c_gray, false);
                    // 显示物品的描述
                    draw_text(x+34+(max_width/2-20*(text_length/2))-max_width, y+43+(i*34)+34, obj_bag.item_data[equip_data[i,ITEM_INDEX], ITEM_DESCRIBE]);
                    // 物品的种类
                    draw_text(x+34-max_width+(max_width-text_type_length*20), y+43+(i*34)+34+30, item_type);
                    // 分割线
                    draw_line_colour(x+34-max_width, y+43+(i*34)+34+30, x+34, y+43+(i*34)+34+30, c_teal, c_teal);
                    // 显示物品的属性
                    if( count-1 )
                    {
                        for( index = 0; index &lt; count; index += 1 )
                        {
                            draw_text(x+34, y+43+(i*34)+34+50+text_height*index, variable[index]);
                        }
                    }
                    else
                    {
                        draw_text(x+34, y+43+(i*34)+34+50, obj_bag.item_data[equip_data[i, ITEM_INDEX], ITEM_EFFECT]);
                    }
                    // 分割线
                    draw_line_colour(x+34, y+43+(i*34)+34+70+text_height*count, x+34, y+43+(i*34)+34+70+text_height*count, c_teal, c_teal);
                    // 显示物品的出售价格
                    draw_text(x+34-max_width, y+43+(i*34)+34+80+text_height*count, string("出售价格：") + string(obj_bag.item_data[equip_data[i, ITEM_INDEX], ITEM_VALUE]/4) );
                }
                else
                {
                    // 绘制物品信息显示框
                    draw_rectangle_colour(x+34, y+43+(i*34)+34, x+34+max_width, y+43+(i*34)+34+100+text_height*count, c_white, c_white, c_gray, c_gray, false);
                    // 显示物品的描述
                    draw_text(x+34+(max_width/2-20*(text_length/2)), y+43+(i*34)+34, obj_bag.item_data[equip_data[i, ITEM_INDEX], ITEM_DESCRIBE]);
                    // 物品的种类
                    draw_text(x+34+(max_width-text_type_length*20), y+43+(i*34)+34+30, item_type);
                    // 分割线
                    draw_line_colour(x+34, y+43+(i*34)+34+30, x+34+max_width, y+43+(i*34)+34+30, c_teal, c_teal);
                    // 显示物品的属性
                    if( count-1 )
                    {
                        for( index = 0; index &lt; count; index += 1 )
                        {
                            draw_text(x+34, y+43+(i*34)+34+50+text_height*index, variable[index]);
                        }
                    }
                    else
                    {
                        draw_text(x+34, y+43+(i*34)+34+50, obj_bag.item_data[equip_data[i, ITEM_INDEX], ITEM_EFFECT]);
                    }
                    // 分割线
                    draw_line_colour(x+34, y+43+(i*34)+34+70+text_height*count, x+34+max_width, y+43+(i*34)+34+70+text_height*count, c_teal, c_teal);
                    // 显示物品的出售价格
                    draw_text(x+34, y+43+(i*34)+34+80+text_height*count, string("出售价格：") + string(obj_bag.item_data[equip_data[i, ITEM_INDEX], ITEM_VALUE]/4) );
                }
                // 当前格子有物体时，判断是否双击
                if( mouse_check_button_released(mb_right) )
                {
                    var bi;
                    for( bi = 0; bi &lt; 36; bi += 1 )
                    {
                        if( !obj_bag.item_data[obj_bag.item_site[bi,ITEM_INDEX], ITEM_INDEX] )
                        {   
                            // 如果是双手武器
                            if( obj_bag.item_data[equip_data[i, ITEM_INDEX], ITEM_INDEX] &lt;= 98 &amp;&amp; obj_bag.item_data[equip_data[i, ITEM_INDEX], ITEM_INDEX] &gt;= 92)
                            {
                                add_items(equip_data[i, ITEM_INDEX], 1);
                                equip_data[1,0] = 0;
                                equip_data[0,0] = 0;
                            }
                            else
                            {
                                add_items(equip_data[i, ITEM_INDEX], 1);
                                equip_data[i,0] = 0;
                            }
                        }         
                    }
                    calculate_data();
                }
            }
        }
    } 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>126,126</point>
  </PhysicsShapePoints>
</object>
